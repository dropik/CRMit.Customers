trigger:
  branches:
    exclude:
      - '*'

pr:
  - master

resources:
  repositories:
    - repository: crmit
      type: github
      name: dropik/CRMit
      ref: refs/heads/master
      endpoint: dropik

variables:
  - name: projectName
    value: CRMit.Customers

stages:
  - stage: test
    displayName: Testing
    jobs:
      - job: unittest
        displayName: Unit Testing
        steps:
          - task: UseDotNet@2
            inputs:
              version: '5.0.x'

          - task: DotNetCoreCLI@2
            inputs:
              command: 'test'
              arguments: --configuration Debug --logger trx --results-directory $(Agent.TempDirectory)/$(Build.BuildNumber)/TestResults --collect:"XPlat Code Coverage" --settings unittest.runsettings
              publishTestResults: false
              projects: test/$(projectName).UnitTests/$(projectName).UnitTests.csproj

          - task: PublishTestResults@2
            displayName: Publish test results
            inputs:
              testResultsFormat: VSTest
              testResultsFiles: $(Agent.TempDirectory)/$(Build.BuildNumber)/TestResults/*.trx
              failTaskOnFailedTests: true

          - task: PublishCodeCoverageResults@1
            displayName: Publish code coverage report
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(Agent.TempDirectory)/$(Build.BuildNumber)/TestResults/**/coverage.cobertura.xml
  
      - job: integrationtest
        displayName: Integration Testing
        steps:
          - task: UseDotNet@2
            inputs:
              version: '5.0.x'

          - task: DockerCompose@0
            displayName: Up DB container
            inputs:
              containerregistrytype: 'Container Registry'
              dockerComposeFile: 'docker-compose.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'up'
              arguments: '-d'

          - task: PowerShell@2
            displayName: Run tests
            inputs:
              targetType: 'inline'
              script: |
                docker build -t crmit-customers-it -f test/CRMit.Customers.IntegrationTests/Dockerfile $(Build.Repository.LocalPath)
                docker run --name crmit-customers-it --network=crmit-customers crmit-customers-it
                docker cp crmit-customers-it:/testresults ./testresults/it
                docker rm crmit-customers-it

          - task: DockerCompose@0
            displayName: Down DB container
            inputs:
              containerregistrytype: 'Container Registry'
              dockerComposeFile: 'docker-compose.yml'
              action: 'Run a Docker Compose command'
              dockerComposeCommand: 'down'

          - task: PublishTestResults@2
            displayName: Publish test results
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/*.trx'
              searchFolder: '$(System.DefaultWorkingDirectory)/testresults/it'
              failTaskOnFailedTests: true
          
  - stage: build
    displayName: Build
    jobs:
      - job: build
        displayName: Build docker image
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'Docker Registry'
              command: 'login'
              addPipelineData: false

          - task: Docker@2
            inputs:
              containerRegistry: 'Docker Registry'
              repository: 'dropik/crmit-customers'
              command: 'buildAndPush'
              Dockerfile: 'src/CRMit.Customers/Dockerfile'
              buildContext: '$(Build.Repository.LocalPath)'
              tags: 'staging'

          - task: Docker@2
            inputs:
              containerRegistry: 'Docker Registry'
              command: 'logout'
              addPipelineData: false

  - stage: e2e
    displayName: Acceptance
    jobs:
      - job: e2e
        displayName: Running E2E tests
        steps:
          - checkout: crmit

          - task: BatchScript@1
            displayName: Configuring bootstrap
            inputs:
              filename: 'config.cmd'
              workingFolder: '$(Build.Repository.LocalPath)'

          - task: BatchScript@1
            displayName: Start system
            inputs:
              filename: 'run.cmd'
              arguments: /t
              workingFolder: '$(Build.Repository.LocalPath)'

          - task: PowerShell@2
            displayName: Run tests
            inputs:
              targetType: 'inline'
              script: |
                docker build -t crmit-e2e -f test/CRMit.E2E/Dockerfile $(Build.Repository.LocalPath)
                docker run --name crmit-e2e --network=crmit-services crmit-e2e
                docker cp crmit-e2e:/testresults ./testresults/e2e
                docker rm crmit-e2e

          - task: BatchScript@1
            displayName: Stop system
            inputs:
              filename: 'down.cmd'
              workingFolder: '$(Build.Repository.LocalPath)'

          - task: PublishTestResults@2
            displayName: Publish test results
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/*.trx'
              searchFolder: '$(System.DefaultWorkingDirectory)/testresults/e2e'
              failTaskOnFailedTests: true