variables:
  - name: buildConfiguration
    value: Debug

  - name: projectName
    value: CRMit.Customers


jobs:
  - job: unittest
    displayName: Unit Testing
    steps:
      - task: UseDotNet@2
        inputs:
          version: '5.0.x'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          arguments: --configuration $(buildConfiguration) --logger trx --results-directory $(Agent.TempDirectory)/$(Build.BuildNumber)/TestResults --collect:"XPlat Code Coverage" --settings unittest.runsettings
          publishTestResults: false
          projects: test/$(projectName).UnitTests/$(projectName).UnitTests.csproj

      - task: PublishTestResults@2
        displayName: Publish test results
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Agent.TempDirectory)/$(Build.BuildNumber)/TestResults/*.trx
          failTaskOnFailedTests: true

      - task: PublishCodeCoverageResults@1
        displayName: Publish code coverage report
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(Agent.TempDirectory)/$(Build.BuildNumber)/TestResults/**/coverage.cobertura.xml
  
  - job: integrationtest
    displayName: Integration Testing
    steps:
      - task: UseDotNet@2
        inputs:
          version: '5.0.x'

      - task: DockerCompose@0
        displayName: Create test containers
        inputs:
          containerregistrytype: 'Container Registry'
          dockerComposeFile: 'docker-compose-test.yml'
          action: 'Run a Docker Compose command'
          dockerComposeCommand: 'up'
          arguments: '--no-start'
          
      - task: DockerCompose@0
        displayName: Start containers
        inputs:
          containerregistrytype: 'Container Registry'
          dockerComposeFile: 'docker-compose-test.yml'
          action: 'Run a Docker Compose command'
          dockerComposeCommand: 'start'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'custom'
          custom: 'tool'
          arguments: 'restore'

      - task: PowerShell@2
        displayName: Update database
        inputs:
          filePath: 'update-test-db.ps1'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          projects: 'test/CRMit.Customers.IntegrationTests/CRMit.Customers.IntegrationTests.csproj'
          publishTestResults: true